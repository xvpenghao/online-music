swagger: "2.0"
info: {}
basePath: v1
paths:
  /channel/createChannel:
    post:
      tags:
      - channel
      description: 添加平台分类
      operationId: ChannelController.CreateChannel
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.CreateChannelReq'
      responses:
        exec:
          description: error
        resp:
          description: true "resp"
          schema:
            $ref: '#/definitions/models.CreateChannelResp'
  /channel/createChannelUI:
    get:
      tags:
      - channel
      description: 添加平台分类UI
      operationId: ChannelController.ChannelAddUI
      responses:
        exec:
          description: error
  /channel/modifyChannel:
    put:
      tags:
      - channel
      description: 修改渠道信息
      operationId: ChannelController.ModifyChannel
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.ModifyChannelReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.ModifyChannelResp'
        exec:
          description: error
  /channel/queryChannelDetail/{channelId}:
    get:
      tags:
      - channel
      description: 查询渠道详情
      operationId: ChannelController.QueryChannelDetail
      parameters:
      - in: path
        name: channelId
        description: 渠道id
        required: true
        type: string
      responses:
        exec:
          description: error
  /channel/queryChannelList:
    post:
      tags:
      - channel
      description: 查询渠道列表
      operationId: ChannelController.QueryChannelList
      parameters:
      - in: body
        name: req
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.QueryChannelListReq'
      responses:
        exec:
          description: error
        resp:
          description: true "resp"
          schema:
            $ref: '#/definitions/models.QueryChannelListResp'
  /channel/queryChannelListUI:
    get:
      tags:
      - channel
      description: 平台分类列表UI
      operationId: ChannelController.QueryChannelListUI
      responses:
        exec:
          description: error
  /data/queryGenderProportion:
    get:
      tags:
      - data
      description: 查询性别比例
      operationId: DataController.QueryGenderProportion
      responses:
        exec:
          description: error
  /data/queryWebsiteUseGroup:
    get:
      tags:
      - data
      description: 查询网站使用群体
      operationId: DataController.QueryWebsiteUseGroup
      responses:
        exec:
          description: error
  /index/:
    get:
      tags:
      - index
      description: 后台首页UI
      operationId: AdminIndexController.IndexUI
      responses:
        exec:
          description: error
  /index/errorUI:
    get:
      tags:
      - index
      description: 错误页面
      operationId: IndexController.ErrorUI
      responses:
        exec:
          description: error
  /index/indexUI:
    get:
      tags:
      - index
      description: 首页页面
      operationId: IndexController.IndexUI
      responses:
        exec:
          description: error
  /index/welcomeUI:
    get:
      tags:
      - index
      description: 欢迎页
      operationId: AdminIndexController.WelcomeUI
      responses:
        exec:
          description: error
  /login/:
    get:
      tags:
      - login
      description: 登录UI
      operationId: BLoginController.BLoginUI
      responses:
        exec:
          description: error
    post:
      tags:
      - login
      description: 后台用户登录
      operationId: BLoginController.BLogin
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.BLoginReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.BLoginResp'
        exec:
          description: error
  /login/loginOut:
    get:
      tags:
      - login
      description: 退出登录
      operationId: LoginController.LoginOut
  /login/loginUI:
    get:
      tags:
      - login
      description: 登录UI
      operationId: LoginController.LoginUI
  /song/createSong:
    post:
      tags:
      - song
      description: 添加歌曲，添加歌曲到歌单
      operationId: SongController.CreateSong
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.CreateSongReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.CreateSongResp'
        exec:
          description: error
  /song/createSongPlayHistory:
    post:
      tags:
      - song
      description: 添加歌曲播放历史
      operationId: SongController.CreateSongPlayHistory
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.CreateSongPlayHistoryReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.CreateSongPlayHistoryResp'
        exec:
          description: error
  /song/deleteAllSongPlayHistory:
    delete:
      tags:
      - song
      description: 删除所有歌曲播放历史
      operationId: SongController.DeleteAllSongPlayHistory
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.DeleteAllSongPlayHistoryResp'
        exec:
          description: error
  /song/deleteSong:
    delete:
      tags:
      - song
      description: 删除歌曲
      operationId: SongController.DeleteSong
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.DeleteSongReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.DeleteSongResp'
        exec:
          description: error
  /song/deleteSongPlayHistory/{songId}:
    delete:
      tags:
      - song
      description: 删除播放历史歌曲
      operationId: SongController.DeleteSongPlayHistory
      parameters:
      - in: path
        name: songId
        description: 歌曲Id
        required: true
        type: string
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.DeleteSongPlayHistoryResp'
        exec:
          description: error
  /song/queryCollectSCoverSongList/{songCoverId}:
    get:
      tags:
      - song
      description: 根据收藏歌单id得到歌曲列表信息
      operationId: SongController.ModifySongCoverList
      parameters:
      - in: path
        name: songCoverId
        description: 歌单id
        required: true
        type: string
      responses:
        exec:
          description: error
  /song/querySongDetail/{songID}:
    get:
      tags:
      - song
      description: 查询歌曲详情
      operationId: SongController.QuerySongDetail
      parameters:
      - in: path
        name: songId
        description: 歌曲ID
        required: true
        type: string
      responses:
        exec:
          description: error
        info:
          description: true "返回歌曲相应信息"
          schema:
            $ref: '#/definitions/models.QuerySongDetailResp'
  /song/querySongListByKeyWord:
    post:
      tags:
      - song
      description: 查询歌曲列表通过关键字
      operationId: SongController.QuerySongListByKeyWord
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.QuerySongListByKeyWordReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.QuerySongListByKeyWordResp'
        exec:
          description: error
  /song/querySongListByKeyWordUI:
    get:
      tags:
      - song
      description: 查询歌曲列表通过关键字UI
      operationId: SongController.QuerySongListByKeyWordUI
      responses:
        exec:
          description: error
  /song/querySongPlayHistoryList:
    get:
      tags:
      - song
      description: 查询歌曲播放历史列表
      operationId: SongController.QuerySongPlayHistoryList
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.QuerySongPlayHistoryListReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.QuerySongPlayHistoryListResp'
        exec:
          description: error
  /song/queryUserSongList/{songCoverId}:
    get:
      tags:
      - song
      description: 根据歌单id得到歌曲列表
      operationId: SongController.ModifySongCoverList
      parameters:
      - in: path
        name: songCoverId
        description: 歌单id
        required: true
        type: string
      responses:
        exec:
          description: error
  /songCover/bSongCoverListUI:
    get:
      tags:
      - songCover
      description: 歌单列表UI
      operationId: BSongCoverController.BSongCoverListUI
      responses:
        exec:
          description: error
  /songCover/createCollectSongCover:
    post:
      tags:
      - songCover
      description: 创建收藏歌单
      operationId: SongCoverController.CreateCollectSongCover
      parameters:
      - in: body
        name: req
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.CreateCollectSongCoverReq'
      responses:
        exec:
          description: error
        resp:
          description: true "resp"
          schema:
            $ref: '#/definitions/models.CreateCollectSongCoverResp'
  /songCover/createSongCover:
    post:
      tags:
      - songCover
      description: 创建歌单
      operationId: SongCoverController.CreateSongCover
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.CreateSongCoverReq'
      responses:
        exec:
          description: error
        res:
          description: true "resp"
          schema:
            $ref: '#/definitions/models.CreateCollectSongCoverResp'
  /songCover/deleteBSongCover:
    delete:
      tags:
      - songCover
      description: 删除后台用户歌单
      operationId: BSongCoverController.DeleteBSongCover
      parameters:
      - in: body
        name: req
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.DeleteBSongCoverReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.DeleteBSongCoverResp'
        exec:
          description: error
  /songCover/deleteSongCover/{songCoverId}:
    delete:
      tags:
      - songCover
      description: 删除歌单
      operationId: SongCoverController.DeleteSongCover
      parameters:
      - in: path
        name: songCoverId
        description: req
        required: true
        type: string
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.DeleteSongCoverResp'
        exec:
          description: error
  /songCover/modifyBSongCover:
    put:
      tags:
      - songCover
      description: 修改歌单信息
      operationId: BSongCoverController.ModifyBSongCover
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.ModifyBSongCoverReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.resp'
        exec:
          description: error
  /songCover/modifySongCover:
    post:
      tags:
      - songCover
      description: 编辑歌单
      operationId: SongCoverController.ModifySongCover
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.ModifySongCoverReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.ModifySongCoverResp'
        exec:
          description: error
  /songCover/modifySongCoverUI:
    get:
      tags:
      - songCover
      description: 修改歌单UI
      operationId: SongCoverController.ModifySongCoverUI
      parameters:
      - in: query
        name: songCoverId
        description: 歌单id
        required: true
        type: string
      - in: query
        name: songCoverName
        description: 歌单名称
        required: true
        type: string
      responses:
        exec:
          description: error
  /songCover/queryBSongCoverByID/{songCoverId}/{userId}:
    get:
      tags:
      - songCover
      description: 查询歌单根据id
      operationId: BSongCoverController.QueryBSongCoverByID
      parameters:
      - in: path
        name: songCoverId
        description: 歌单ID
        required: true
        type: string
      - in: path
        name: userId
        description: 用户ID
        required: true
        type: string
      responses:
        exec:
          description: error
  /songCover/queryPageSongCoverList:
    post:
      tags:
      - songCover
      description: 查询分页歌单列表
      operationId: BSongCoverController.QueryPageSongCoverList
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.QueryPageSongCoverListReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.QueryPageSongCoverListResp'
        exec:
          description: error
  /songCover/querySongCoverList:
    get:
      tags:
      - songCover
      description: 查询歌单列表
      operationId: SongCoverController.SongBestCoverUI
      parameters:
      - in: query
        name: channelId
        description: 来源渠道id 如网易，qq
        required: true
        type: string
      - in: query
        name: curPage
        description: 当前页
        required: true
        type: integer
        format: int64
      responses:
        exec:
          description: error
  /songCover/querySongList:
    get:
      tags:
      - songCover
      description: 根据歌单id获取歌曲列表
      operationId: SongCoverController.QuerySongList
      parameters:
      - in: query
        name: channelId
        description: 渠道id
        required: true
        type: string
      - in: query
        name: songCoverId
        description: 歌单id
        required: true
        type: string
      - in: query
        name: coverImgUrl
        description: 歌单图片id
        required: true
        type: string
      - in: query
        name: description
        description: 歌单描述
        required: true
        type: string
      responses:
        exec:
          description: error
  /songCover/queryUserSongCoverList:
    get:
      tags:
      - songCover
      description: 查询用户歌单列表
      operationId: SongCoverController.QueryUserSongCoverList
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.QueryUserSongCoverListReq'
      responses:
        exec:
          description: error
  /songCover/userSongCoverListUI/{songId}:
    get:
      tags:
      - songCover
      description: 用户歌单列表UI
      operationId: SongCoverController.UserSongCoverListUI
      parameters:
      - in: path
        name: singId
        description: 歌曲id
        required: true
        type: string
      responses:
        exec:
          description: error
  /user/bUserListUI:
    get:
      tags:
      - user
      description: 后台用户列表UI
      operationId: BUserController.BUserListUI
      responses:
        exec:
          description: error
  /user/createUser:
    post:
      tags:
      - user
      description: 添加用户
      operationId: UserController.CreateUser
  /user/modifyBUser:
    put:
      tags:
      - user
      description: 后台修改用户信息
      operationId: BUserController.ModifyBUser
      parameters:
      - in: body
        name: req
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.ModifyBUserReq'
      responses:
        exec:
          description: error
        resp:
          description: true "resp"
          schema:
            $ref: '#/definitions/models.ModifyBUserResp'
  /user/modifyPwd:
    post:
      tags:
      - user
      description: 修改密码
      operationId: UserController.ModifyPwd
  /user/modifyPwdUI:
    get:
      tags:
      - user
      description: 修改密码UI
      operationId: UserController.ModifyPwdUI
  /user/modifyUser:
    post:
      tags:
      - user
      description: 修改用户
      operationId: UserController.ModifyUser
  /user/queryBUserByID/{userId}:
    get:
      tags:
      - user
      description: 查询用户根据ID
      operationId: BUserController.ModifyBUserUI
      parameters:
      - in: path
        name: userId
        description: 用户id
        required: true
        type: string
      responses:
        exec:
          description: error
  /user/queryBUserList:
    post:
      tags:
      - user
      description: 查询用户列表
      operationId: BUserController.QueryBUserList
      parameters:
      - in: body
        name: info
        description: req
        required: true
        schema:
          $ref: '#/definitions/models.QueryBUserListReq'
      responses:
        "200":
          description: '"resp"'
          schema:
            $ref: '#/definitions/models.QueryBUserListResp'
        exec:
          description: error
  /user/registerUI:
    get:
      tags:
      - user
      description: 注册页面
      operationId: UserController.RegisterUI
  /user/userDetailUI:
    get:
      tags:
      - user
      description: 用户基本信息
      operationId: UserController.UserDetailUI
definitions:
  models.BLoginReq:
    title: BLoginReq
    type: object
    properties:
      password:
        type: string
      userName:
        type: string
  models.BLoginResp:
    title: BLoginResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.BUserInfo:
    title: BUserInfo
    type: object
    properties:
      age:
        type: integer
        format: int64
      birthday:
        type: string
      email:
        type: string
      gender:
        type: string
      userId:
        type: string
      userName:
        type: string
  models.ChannelInfo:
    title: ChannelInfo
    type: object
    properties:
      channelId:
        type: string
      channelName:
        type: string
      createUser:
        type: string
      updateTime:
        type: string
  models.CreateChannelReq:
    title: CreateChannelReq
    type: object
    properties:
      channelName:
        type: string
  models.CreateChannelResp:
    title: CreateChannelResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.CreateCollectSongCoverReq:
    title: CreateCollectSongCoverReq
    type: object
    properties:
      songCoverId:
        type: string
      songCoverName:
        type: string
      songCoverUrl:
        type: string
  models.CreateCollectSongCoverResp:
    title: CreateCollectSongCoverResp
    type: object
    properties:
      msg:
        type: string
  models.CreateSongCoverReq:
    title: CreateSongCoverReq
    type: object
    properties:
      songCoverName:
        type: string
  models.CreateSongPlayHistoryReq:
    title: CreateSongPlayHistoryReq
    type: object
    properties:
      playUrl:
        type: string
      singer:
        type: string
      songCoverUrl:
        type: string
      songId:
        type: string
      songName:
        type: string
  models.CreateSongPlayHistoryResp:
    title: CreateSongPlayHistoryResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.CreateSongReq:
    title: CreateSongReq
    type: object
    properties:
      songCoverId:
        type: string
      songId:
        type: string
  models.CreateSongResp:
    title: CreateSongResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.DeleteAllSongPlayHistoryResp:
    title: DeleteAllSongPlayHistoryResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.DeleteBSongCoverReq:
    title: DeleteBSongCoverReq
    type: object
    properties:
      songCoverId:
        type: string
      userId:
        type: string
  models.DeleteBSongCoverResp:
    title: DeleteBSongCoverResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.DeleteSongCoverResp:
    title: DeleteSongCoverResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.DeleteSongPlayHistoryResp:
    title: DeleteSongPlayHistoryResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.DeleteSongReq:
    title: DeleteSongReq
    type: object
    properties:
      songCoverId:
        type: string
      songId:
        type: string
  models.DeleteSongResp:
    title: DeleteSongResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.ModifyBSongCoverReq:
    title: ModifyBSongCoverReq
    type: object
    properties:
      songCoverId:
        type: string
      songCoverName:
        type: string
      userId:
        type: string
  models.ModifyBUserReq:
    title: ModifyBUserReq
    type: object
    properties:
      age:
        type: integer
        format: int64
      birthday:
        type: string
      email:
        type: string
      gender:
        type: string
      userId:
        type: string
      userName:
        type: string
  models.ModifyBUserResp:
    title: ModifyBUserResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.ModifyChannelReq:
    title: ModifyChannelReq
    type: object
    properties:
      channelId:
        type: string
      channelName:
        type: string
  models.ModifyChannelResp:
    title: ModifyChannelResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.ModifySongCoverReq:
    title: ModifySongCoverReq
    type: object
    properties:
      songCoverId:
        type: string
      songCoverName:
        type: string
  models.ModifySongCoverResp:
    title: ModifySongCoverResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.QueryBUserListReq:
    title: QueryBUserListReq
    type: object
    properties:
      age:
        type: integer
        format: int64
      birthday:
        type: string
      curPage:
        type: integer
        format: int64
      email:
        type: string
      gender:
        type: string
      userName:
        type: string
  models.QueryBUserListResp:
    title: QueryBUserListResp
    type: object
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/models.BUserInfo'
      page:
        $ref: '#/definitions/utils.Page'
  models.QueryChannelListReq:
    title: QueryChannelListReq
    type: object
    properties:
      channelName:
        type: string
      curPage:
        type: integer
        format: int64
  models.QueryChannelListResp:
    title: QueryChannelListResp
    type: object
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/models.ChannelInfo'
      page:
        $ref: '#/definitions/utils.Page'
  models.QueryPageSongCoverListReq:
    title: QueryPageSongCoverListReq
    type: object
    properties:
      curPage:
        type: integer
        format: int64
      songCoverName:
        type: string
      type:
        type: integer
        format: int64
      userName:
        type: string
  models.QueryPageSongCoverListResp:
    title: QueryPageSongCoverListResp
    type: object
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/models.SongCoverInfo'
      page:
        $ref: '#/definitions/utils.Page'
  models.QuerySongDetailResp:
    title: QuerySongDetailResp
    type: object
    properties:
      Singer:
        type: string
      SongAlbum:
        type: string
      SongCoverUrl:
        type: string
      SongId:
        type: string
      SongLyric:
        type: string
      SongName:
        type: string
      SongPlayUrl:
        type: string
  models.QuerySongListByKeyWordReq:
    title: QuerySongListByKeyWordReq
    type: object
    properties:
      channelId:
        type: string
      keyWord:
        type: string
  models.QuerySongListByKeyWordResp:
    title: QuerySongListByKeyWordResp
    type: object
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/models.Song'
  models.QuerySongPlayHistoryListReq:
    title: QuerySongPlayHistoryListReq
    type: object
  models.QuerySongPlayHistoryListResp:
    title: QuerySongPlayHistoryListResp
    type: object
    properties:
      list:
        type: array
        items:
          $ref: '#/definitions/models.SongPlayHistory'
  models.QueryUserSongCoverListReq:
    title: QueryUserSongCoverListReq
    type: object
    properties:
      Type:
        type: integer
        format: int64
      UserId:
        type: string
  models.Song:
    title: Song
    type: object
    properties:
      singer:
        type: string
      songAlbum:
        type: string
      songCoverUrl:
        type: string
      songId:
        type: string
      songLyric:
        type: string
      songName:
        type: string
      songPlayUrl:
        type: string
  models.SongCoverInfo:
    title: SongCoverInfo
    type: object
    properties:
      songCoverId:
        type: string
      songCoverName:
        type: string
      type:
        type: string
      userId:
        type: string
      userName:
        type: string
  models.SongPlayHistory:
    title: SongPlayHistory
    type: object
    properties:
      playUrl:
        type: string
      singer:
        type: string
      songCoverUrl:
        type: string
      songId:
        type: string
      songName:
        type: string
  models.baseResp:
    title: baseResp
    type: object
    properties:
      resultCode:
        type: string
      resultMsg:
        type: string
  models.resp:
    title: resp
    type: object
  utils.Page:
    title: Page
    type: object
    properties:
      count:
        type: integer
        format: int64
      curPage:
        type: integer
        format: int64
      groups:
        type: integer
        format: int64
      limit:
        type: integer
        format: int64
